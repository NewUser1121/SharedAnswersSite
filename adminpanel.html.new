<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Admin Panel - Shared Answers</title>
  <link rel="stylesheet" href="MainRecourses/extraMainPage.css">
  <style>
    /* ...existing styles... */
  </style>
</head>
<body>
  <div class="admin-login-container" id="adminLogin">
    <h2>Admin Login</h2>
    <form id="adminLoginForm">
      <input type="text" id="adminUsername" placeholder="Username" required autocomplete="username">
      <input type="password" id="adminPassword" placeholder="Password" required autocomplete="current-password">
      <button type="submit">Login</button>
      <div id="adminLoginMessage"></div>
    </form>
  </div>
  <div class="admin-panel-container" id="adminPanel">
    <!-- ... existing panel content ... -->
  </div>
  
  <script src="MainRecourses/encryption.js"></script>
  <script>
    // Encrypted admin credentials
    const ENCRYPTED_ADMIN_USERNAME = 'OS4yFG49CX3vKjz0bn2GJBhPHX4PtdN+G45o9NBwSHfx8b33yXR5tw==';
    const ENCRYPTED_ADMIN_PASSWORD = 'nX5Bm2QwK9RvYpL1ht6MJCn5mP8Tqw2jN7Vx3DcFbHgE9SzA4Wy0vQ==';
    const API_BASE = '/api';
    let adminToken = null;

    // Admin login with encryption
    const adminLoginForm = document.getElementById('adminLoginForm');
    const adminPanel = document.getElementById('adminPanel');
    const adminLogin = document.getElementById('adminLogin');
    
    adminLoginForm.onsubmit = async function(e) {
      e.preventDefault();
      const username = document.getElementById('adminUsername').value;
      const password = document.getElementById('adminPassword').value;
      
      try {
        // Decrypt stored credentials and compare
        const decryptedStoredUsername = await decrypt(ENCRYPTED_ADMIN_USERNAME);
        const decryptedStoredPassword = await decrypt(ENCRYPTED_ADMIN_PASSWORD);
        
        if (username === decryptedStoredUsername && password === decryptedStoredPassword) {
          adminLogin.style.display = 'none';
          adminPanel.classList.add('active');
        } else {
          document.getElementById('adminLoginMessage').textContent = 'Invalid credentials.';
        }
      } catch (error) {
        console.error('Authentication error:', error);
        document.getElementById('adminLoginMessage').textContent = 'Authentication error occurred.';
      }
    };

    // API Key Generator logic
    const generatedApiKey = document.getElementById('generatedApiKey');
    const copyApiKeyBtn = document.getElementById('copyApiKeyBtn');
    const clearApiKeyBtn = document.getElementById('clearApiKeyBtn');
    const generateApiKeyBtn = document.getElementById('generateApiKeyBtn');
    const apiKeyGenMessage = document.getElementById('apiKeyGenMessage');

    copyApiKeyBtn.onclick = async () => {
      if (generatedApiKey.value) {
        try {
          await navigator.clipboard.writeText(generatedApiKey.value);
          apiKeyGenMessage.textContent = 'Copied!';
          setTimeout(() => apiKeyGenMessage.textContent = '', 1200);
        } catch (error) {
          console.error('Copy error:', error);
          apiKeyGenMessage.textContent = 'Failed to copy!';
        }
      }
    };

    clearApiKeyBtn.onclick = () => {
      generatedApiKey.value = '';
      apiKeyGenMessage.textContent = '';
    };

    generateApiKeyBtn.onclick = async () => {
      const username = prompt('Enter username for API key:');
      const classTag = document.getElementById('apiKeyClassSelect').value;
      if (!username || !classTag) {
        apiKeyGenMessage.textContent = 'Username and class must be selected.';
        return;
      }
      try {
        const encryptedUsername = await encrypt(username);
        const encryptedClassTag = await encrypt(classTag);
        
        const res = await fetch(`${API_BASE}/auth/admin/generate-key`, {
          method: 'POST',
          headers: { 
            'Content-Type': 'application/json',
            'X-Encrypted': 'true'
          },
          body: JSON.stringify({ 
            username: encryptedUsername, 
            classTag: encryptedClassTag
          })
        });
        const data = await res.json();
        if (res.ok) {
          const apiKey = data.encrypted ? await decrypt(data.apiKey) : data.apiKey;
          generatedApiKey.value = apiKey;
          generatedApiKey.dataset.encrypted = await encrypt(apiKey);
          apiKeyGenMessage.textContent = 'API key generated!';
        } else {
          apiKeyGenMessage.textContent = data.error || 'Error generating API key.';
        }
      } catch (err) {
        console.error('API Key generation error:', err);
        apiKeyGenMessage.textContent = 'Network error.';
      }
    };

    // User Manager logic
    const userList = document.getElementById('userList');
    const userDetails = document.getElementById('userDetails');

    async function fetchUsers() {
      try {
        const res = await fetch(`${API_BASE}/users/`, {
          headers: { 'X-Encrypted': 'true' }
        });
        const users = await res.json();
        userList.innerHTML = '';
        
        for (const user of users) {
          try {
            const decryptedUsername = await decrypt(user.encrypted ? user.username : await encrypt(user.username));
            const li = document.createElement('li');
            li.textContent = decryptedUsername + (user.roles.includes('admin') ? ' (admin)' : '');
            li.style.cursor = 'pointer';
            li.dataset.encryptedData = JSON.stringify(user);
            li.onclick = () => showUserDetails(JSON.parse(li.dataset.encryptedData));
            userList.appendChild(li);
          } catch (error) {
            console.error('Error processing user:', error);
          }
        }
      } catch (error) {
        console.error('Error fetching users:', error);
        userList.innerHTML = '<li style="color: red;">Error loading users</li>';
      }
    }

    async function showUserDetails(user) {
      try {
        const decryptedUser = {
          username: await decrypt(user.encrypted ? user.username : await encrypt(user.username)),
          email: await decrypt(user.encrypted ? user.email : await encrypt(user.email)),
          roles: user.roles,
          apiKey: user.apiKey ? await decrypt(user.encrypted ? user.apiKey : await encrypt(user.apiKey)) : ''
        };

        userDetails.style.display = 'block';
        userDetails.innerHTML = `
          <strong>Username:</strong> ${decryptedUser.username}<br>
          <strong>Email:</strong> ${decryptedUser.email}<br>
          <strong>Roles:</strong> ${decryptedUser.roles.join(', ')}<br>
          <strong>API Key:</strong> <input type="text" value="${decryptedUser.apiKey}" readonly id="detailApiKey" style="width:60%"> 
          <button id="copyDetailApiKey">Copy</button><br>
          <button id="revokeUserBtn" style="margin-top:1em; background:#ef4444;">Revoke Access</button>
          <button id="closeUserDetails" style="margin-top:1em; margin-left:1em;">Close</button>
        `;

        document.getElementById('copyDetailApiKey').onclick = async () => {
          const keyInput = document.getElementById('detailApiKey');
          if (keyInput.value) {
            try {
              await navigator.clipboard.writeText(keyInput.value);
              alert('API key copied!');
            } catch (error) {
              console.error('Copy error:', error);
              alert('Failed to copy API key');
            }
          }
        };

        document.getElementById('revokeUserBtn').onclick = async () => {
          if (confirm('Are you sure you want to revoke this user?')) {
            const encryptedUsername = await encrypt(decryptedUser.username);
            const res = await fetch(`${API_BASE}/users/revoke`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'X-Encrypted': 'true'
              },
              body: JSON.stringify({ username: encryptedUsername })
            });
            if (res.ok) {
              userDetails.style.display = 'none';
              fetchUsers();
            } else {
              alert('Failed to revoke user.');
            }
          }
        };

        document.getElementById('closeUserDetails').onclick = () => {
          userDetails.style.display = 'none';
        };
      } catch (error) {
        console.error('Error showing user details:', error);
        alert('Error displaying user details');
      }
    }

    adminPanel.addEventListener('transitionend', () => {
      if (adminPanel.classList.contains('active')) fetchUsers();
    });

    // File upload handling with encryption
    const fileUploadForm = document.getElementById('fileUploadForm');
    const resourceType = document.getElementById('resourceType');
    const fileInputGroup = document.getElementById('fileInputGroup');
    const linkInputGroup = document.getElementById('linkInputGroup');

    resourceType.addEventListener('change', function() {
      fileInputGroup.style.display = this.value === 'file' ? 'block' : 'none';
      linkInputGroup.style.display = this.value !== 'file' ? 'block' : 'none';
    });

    fileUploadForm.addEventListener('submit', async function(e) {
      e.preventDefault();
      const messageEl = document.getElementById('fileUploadMessage');
      messageEl.textContent = 'Processing...';
      messageEl.className = '';

      try {
        const formData = new FormData();
        const classTag = document.getElementById('fileClass').value;
        const subject = document.getElementById('subject').value;
        
        if (!classTag || !subject) {
          throw new Error('Please select both grade and subject');
        }
        
        // Encrypt sensitive data
        formData.append('classTag', await encrypt(classTag));
        formData.append('subject', await encrypt(subject));
        formData.append('type', await encrypt(resourceType.value));
        formData.append('label', await encrypt(document.getElementById('displayLabel').value));
        
        if (resourceType.value === 'file' && fileInput.files.length > 0) {
          formData.append('file', fileInput.files[0]);
        } else if (resourceType.value !== 'file') {
          formData.append('driveLink', await encrypt(linkInput.value));
        } else {
          throw new Error('Please select a file or provide a link');
        }

        const result = await handleResourceUpload(formData);
        messageEl.className = 'admin-message';
        messageEl.textContent = 'Resource added successfully!';
        fileUploadForm.reset();
        fileInputGroup.style.display = 'none';
        linkInputGroup.style.display = 'none';
      } catch (error) {
        messageEl.className = 'admin-error';
        messageEl.textContent = `Error: ${error.message}`;
      }
    });

    async function handleResourceUpload(formData) {
      const response = await fetch('/api/upload/resource', {
        method: 'POST',
        body: formData,
        headers: {
          'X-Encrypted': 'true'
        }
      });
      
      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || 'Upload failed');
      }
      
      return response.json();
    }
  </script>
</body>
</html>
